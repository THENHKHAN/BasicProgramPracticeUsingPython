
# Python Program to Print All Prime Numbers in an Interval (user defined)


def genPrimeNumber (lowerNum , UpperNum):
    listofPrimeNum = []
    for num in range(lowerNum+1 , UpperNum):
        
        for i in range(2,num) :

            if (num % 1 == 0 and num % i == 0):
                break 
            else :
                pass
        
        listofPrimeNum.append(num)   
                    
    return listofPrimeNum


lowerNum = int (input("please enter the lower number : "))
upperNum = int (input("please enter the upper number : "))

if (lowerNum == upperNum):
    print(f"lower {lowerNum} and upper {upperNum} is same so no prime exist")
elif (lowerNum > upperNum) :
    print(f" Since lower {lowerNum} is greater than upper number {upperNum} so no prime number possible")
elif (lowerNum < 1 ):
    print(f" lower number must be greater than 1")
else :
    myPrimNumer = genPrimeNumber (lowerNum , upperNum )
    if (myPrimNumer == []):
        print(f"No prime number found between {lowerNum} and {upperNum}")
    else :
        print (f''' Total prime number found  between {lowerNum} and {upperNum} :  {len(myPrimNumer)} 
 List of Prime number : ''' , end= " ")
        for num in myPrimNumer :
            print (num , end =" ")


# The user has to give the upper limit and the lower limit of the interval as input and our program should display all the Prime Numbers within that interval. 

# INFO :
'''
A Prime Number(primeNum>1) is a natural number(num>=1) that is greater than 1 and has only two factors, 1 and the number itself. 
First, few prime numbers are- 2,3,5,7,11.. and so on. Numbers that are not prime are called composite numbers 
and have more than 2 factors.

'''
#APPROACH
'''
For executing this task our approach will be to run a loop from the lower limit to the upper limit and check each number 
in this interval if it is prime or not. 
'''

# I/O
'''
The program should take input as follows,

Input- Enter upper limit: 3

Enter lower limit: 10

Output- Prime numbers between 3 and 10 are:

3 5 7


'''

# Future Enhancement :
'''
Keep in mind that generating prime numbers in this way is not the most efficient method, especially for a large range, 
as it has a relatively high time complexity. There are more efficient algorithms for prime number generation,
such as the **Sieve of Eratosthenes**.

''' 
# Algorithm
'''
Look at the algorithm below to understand the logic.

Step  - Take input of lower and upper limit from user

Step 0 - CHeck lower > upper also lower > 1 

Step 1 - Define a function that will check if the number is prime or not and return the result (list of prime num or empty list)

Step 2 - run a outer loop to exract number using rang function : from lower+1 to upper-1

Step 3 - Run a inner loop starting from 2 (since 1 is not a prime number) to the number to check for factors

Step 4 - If the number has a factor break out of the loop

Step 5 - Else, pass(since i want to use ELSE with for LOOP) so i used ELSE with inner for loop  to append in the list 

Step 6 - return the list to the called function

Step 7 - check empty list or not and if not then print the list of prime number generated by the above function


'''